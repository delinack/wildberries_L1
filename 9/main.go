/*
Разработать конвейер чисел.
Даны два канала: в первый пишутся числа (x) из массива,
во второй — результат операции x*2,
после чего данные из второго канала должны выводиться в stdout.
*/

package main

import (
	"fmt"
	"sync"
)

func main() {
	chFirst := make(chan int)
	chSecond := make(chan int)
	array := [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	wg := &sync.WaitGroup{} // создаем ссылку на wait group

	wg.Add(1)   // добавляем воркер, кладем горутину в wait-группу, счетчик - 1
	go func() { // горутина для чтения чисел из массива
		defer wg.Done() // отложенный вызов функции, уменьшающий счетчик на 1 (выполнится при выходе из функции)
		for i := range array {
			chFirst <- array[i] // отправляем значение из массива в первый канал
		}
		close(chFirst) // закрываем канал после того, как все данные считаны
	}()

	wg.Add(1)   // добавляем воркер, кладем горутину в wait-группу, счетчик - 1
	go func() { // горутина для чтения чисел из первого канала
		defer wg.Done() // отложенный вызов функции, уменьшающий счетчик на 1 (выполнится при выходе из функции)
		for i := range chFirst {
			chSecond <- i * 2 // умножаем число на 2 иотправляем результата во второй канал
		}
		close(chSecond) // закрываем канал после того, как все данные считаны
	}()

	for i := range chSecond {
		fmt.Println(i)
	}

	wg.Wait() // ожидаем, пока счетчик не станет 0
}

/*
	Первая горутина читает числа из массива и отправляет их в канал chFirst.
	Затем вторая горутина читает числа из канала chFirst, удваивает их и отправляет в канал chSecond.
	Закрытие каналов позволяет другим горутинам, которые читают из этих каналов,
	корректно завершить работу, и это позволяет избежать блокировки на чтении из канала,
	когда отправитель закончил передавать в него данные.
*/
