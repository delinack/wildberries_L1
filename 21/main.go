/*
Реализовать паттерн «адаптер» на любом примере.
*/

package main

import "fmt"

type Dog interface { // создаем интерфейс Dog, определяющий метод Bark
	Wuf()
}

type Cat struct { // создаем структуру Cat
}

func (c Cat) Meow() { // прописываем метод Meow для структуры Cat
	fmt.Println("Meow")
}

type Adapter struct { // создаем адаптер с полем типа Cat
	cat Cat
}

func (a Adapter) Wuf() { // прописываем метод Wuf для структуры Adapter, теперь структура удовлетворяет интерфейсу Dog
	a.cat.Meow() // вызовем метод Meow структуры Cat
}

func main() {
	adapter := Adapter{cat: Cat{}} // создадим экземпляр структуры Adapter

	adapter.Wuf() // вызовем метод адаптера - Wuf
}

/*
	Я создала структуру Adapter, которая реализует интерфейс Dog
	и использует структуру Cat для выполнения метода Wuf.
	В этом методе я вызываю метод Meow для структуры Cat.
	Таким образом, благодаря использованию паттерна адаптер,
	я могу использовать структуру Cat, которая не имеет метода Wuf,
	как если бы она реализовывала интерфейс Dog.
*/