/*
Реализовать структуру-счетчик, которая будет инкрементироваться в конкурентной среде.
По завершению программа должна выводить итоговое значение счетчика.
*/

package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

type Counter struct {
	value int32
}

func main() {
	wg := &sync.WaitGroup{} // создаем ссылку на wait group
	counter := Counter{}    // создаем объект типа Counter

	for i := 0; i < 100; i++ {
		wg.Add(1) // добавляем воркер, кладем горутину в wait-группу, счетчик - 1
		go func() {
			defer wg.Done()                    // отложенный вызов функции, уменьшающий счетчик на 1 (выполнится при выходе из функции)
			atomic.AddInt32(&counter.value, 1) // инкрементируем переменную counter.value без блокировки других потоков
		}()
	}

	wg.Wait() // ожидаем, пока счетчик не станет 0
	fmt.Printf("Final counter value: %d\n",
		atomic.LoadInt32(&counter.value)) // атомарно загружаем значение counter.value из общей памяти и печатаем его
}

/*
	Примитив синхронизации atomic позволяет работать с общей памятью
	без блокировки. Безопасность обеспечена атомарностью, то есть целостностью
	операций, которые не будут прерваны.
*/
